from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states import QuestionStates, AnswerStates
from services import ClassRatingService, is_admin
from ui import UI
from config import EMOJI

router = Router()

@router.message(Command(commands=["start", "restart"]))
async def cmd_start(message: Message):
    uid = message.from_user.id
    if is_admin(uid):
        await message.answer("üõ† <b>–ê–¥–º–∏–Ω-–º–µ–Ω—é</b>", reply_markup=UI.admin_menu())
    else:
        await ClassRatingService.register_user(uid, message.from_user.username or '')
        await message.answer(f"{EMOJI['welcome']} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=UI.main_menu())

@router.message(Command(commands=["help"]))
@router.message(F.text == f"{EMOJI['help']} –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    await message.answer(
        f"{EMOJI['sos']} <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        f"{EMOJI['question']} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n"
        f"{EMOJI['open_questions']} –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        f"{EMOJI['rating']} –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∞—Å—Å–æ–≤\n\n"
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ.",
        reply_markup=UI.help_button(),
        parse_mode="HTML"
    )

@router.message(F.text == f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã")
async def admin_add(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ö–ª–∞—Å—Å –ë–∞–ª–ª—ã</code>\n–ü—Ä–∏–º–µ—Ä: 10A 50", 
                        parse_mode="HTML", reply_markup=UI.cancel_button())
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–≥–∞)
    await state.set_state(AnswerStates.waiting_for_meeting_time)

@router.message(F.text == f"{EMOJI['check']} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î")
async def admin_check_db(message: Message):
    from services import CLASS_DB_PATH
    import os
    import aiosqlite
    if not is_admin(message.from_user.id):
        return
    if not os.path.exists(CLASS_DB_PATH):
        await message.answer(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {CLASS_DB_PATH}", 
                        reply_markup=UI.admin_menu())
        return
    async with aiosqlite.connect(CLASS_DB_PATH) as conn:
        cursor = await conn.execute("SELECT COUNT(*) FROM class_scores")
        count = (await cursor.fetchone())[0]
        cursor = await conn.execute("SELECT class_name, total_score FROM class_scores LIMIT 5")
        sample = await cursor.fetchall()
        text = f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ\nüìÅ –ü—É—Ç—å: {CLASS_DB_PATH}\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {count}\n\n"
        if sample:
            text += "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:\n"
            for cls, score in sample:
                text += f"- {cls}: {score} –±–∞–ª–ª–æ–≤\n"
        await message.answer(text, reply_markup=UI.admin_menu())

@router.message(AnswerStates.waiting_for_meeting_time)
async def process_score(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await state.clear()
        return
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=UI.admin_menu())
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–ª–∞—Å—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.", reply_markup=UI.admin_menu())
        await state.clear()
        return
    class_name, score = parts
    try:
        score = int(score)
    except ValueError:
        await message.answer("‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=UI.admin_menu())
        await state.clear()
        return
    success = await ClassRatingService.add_class_score(class_name, score)
    if success:
        await message.answer(f"‚úÖ –ö–ª–∞—Å—Å {class_name} –ø–æ–ª—É—á–∏–ª +{score} –±–∞–ª–ª–æ–≤!", reply_markup=UI.admin_menu())
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤.", reply_markup=UI.admin_menu())
    await state.clear()

@router.message(F.text == f"{EMOJI['rating']} –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤")
async def show_rating(message: Message):
    scores = await ClassRatingService.get_class_scores()
    if not scores:
        await message.answer("üìä –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç")
        return
    text = UI.format_class_rating(scores)
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == f'{EMOJI["question"]} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def start_question(message: Message, state: FSMContext):
    await message.answer(
        f"{EMOJI['pin']} –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=UI.cancel_button()
    )
    # FSM: –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(QuestionStates.waiting_for_title)

@router.message(QuestionStates.waiting_for_title)
async def process_question_title(message: Message, state: FSMContext):
    if message.text == f'{EMOJI["cancel"]} –û—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer(
            f"{EMOJI['info']} –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=UI.main_menu()
        )
    if len(message.text) > 100:
        return await message.reply(
            f"{EMOJI['warning']} –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
    await state.update_data(title=message.text)
    await message.answer(
        f"{EMOJI['description']} –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    # FSM: –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(QuestionStates.waiting_for_description)

@router.message(QuestionStates.waiting_for_description)
async def process_question_description(message: Message, state: FSMContext):
    if message.text == f'{EMOJI["cancel"]} –û—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer(
            f"{EMOJI['info']} –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=UI.main_menu()
        )
    data = await state.get_data()
    title = data.get("title")
    description = message.text.strip()
    if description == "-":
        description = ""
    await ClassRatingService.save_question(message.from_user.id, title, description)
    await message.answer(
        f"{EMOJI['success']} –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=UI.main_menu()
    )
    await state.clear()

@router.message(F.text == f"{EMOJI['open']} –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def show_open_questions(message: Message):
    questions = await ClassRatingService.get_open()
    if not questions:
        await message.answer(f"{EMOJI['empty']} –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=UI.main_menu())
        return
    await message.answer(
        f"{EMOJI['open']} <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>",
        reply_markup=UI.main_menu(),
        parse_mode="HTML"
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=UI.question_list(questions)
    )

@router.callback_query(F.data.startswith("question_"))
async def show_question_details(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º id –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "question_5" ‚Üí 5)
    qid = int(callback.data.split("_")[1])
    question = await ClassRatingService.get_question(qid)
    if not question:
        await callback.message.answer(f"{EMOJI['error']} –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=UI.main_menu())
        return
    await callback.message.answer(
        UI.format_question(question, with_author=True),
        reply_markup=UI.answer_type_buttons(qid),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("answer_online_"))
async def answer_online(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º id –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "answer_online_7" ‚Üí 7)
    qid = int(callback.data.split("_")[-1])
    await state.update_data(qid=qid)
    await callback.message.answer(
        f"{EMOJI['mail']} –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram-–∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):",
        reply_markup=UI.cancel_button()
    )
    # FSM: –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.set_state(AnswerStates.waiting_for_contact)

@router.callback_query(F.data.startswith("answer_offline_"))
async def answer_offline(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º id –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "answer_offline_7" ‚Üí 7)
    qid = int(callback.data.split("_")[-1])
    await state.update_data(qid=qid)
    await callback.message.answer(
        f"{EMOJI['calendar']} –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.05 15:00):",
        reply_markup=UI.cancel_button()
    )
    # FSM: –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏
    await state.set_state(AnswerStates.waiting_for_meeting_time)

@router.message(AnswerStates.waiting_for_contact)
async def process_online_answer(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=UI.main_menu())
    if not message.text.startswith("@"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram-–∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
        return
    data = await state.get_data()
    qid = data.get("qid")
    contact = message.text.strip()
    await ClassRatingService.save_online_answer(qid, message.from_user.id, contact)
    await message.answer(
        f"{EMOJI['success']} –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É –≤–æ–ø—Ä–æ—Å–∞!",
        reply_markup=UI.main_menu()
    )
    await state.clear()

@router.message(AnswerStates.waiting_for_meeting_time)
async def process_offline_answer(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=UI.main_menu())
    data = await state.get_data()
    qid = data.get("qid")
    meeting_time = message.text.strip()
    await ClassRatingService.save_offline_answer(qid, message.from_user.id, meeting_time)
    await message.answer(
        f"{EMOJI['success']} –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É –≤–æ–ø—Ä–æ—Å–∞!",
        reply_markup=UI.main_menu()
    )
    await state.clear()