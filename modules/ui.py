from telebot import types
from typing import List, Tuple, Dict, Any

from modules.config import EMOJI, TEXT

class UI:
    @staticmethod
    def main_menu():
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        kb.add(
            types.KeyboardButton(f'{EMOJI["question"]} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'),
            types.KeyboardButton(f'{EMOJI["open"]} –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
        )
        kb.add(
            types.KeyboardButton(f'{EMOJI["rating"]} –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤'),
            types.KeyboardButton(f'{EMOJI["help"]} –ü–æ–º–æ—â—å')
        )
        return kb

    @staticmethod
    def admin_menu():
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        kb.add(
            types.KeyboardButton(f'{EMOJI["add"]} –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã'),
            types.KeyboardButton(f'{EMOJI["contact"]} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏')
        )
        kb.add(
            types.KeyboardButton(f'{EMOJI["rating"]} –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤'),
            types.KeyboardButton(f'{EMOJI["check"]} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î')
        )
        kb.add(
            types.KeyboardButton(f'{EMOJI["back"]} –í–µ—Ä–Ω—É—Ç—å—Å—è')
        )
        return kb

    @staticmethod
    def contact_management_menu():
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        kb.add(
            types.KeyboardButton(f'{EMOJI["add"]} –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'),
            types.KeyboardButton(f'{EMOJI["cancel"]} –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')
        )
        kb.add(
            types.KeyboardButton(f'{EMOJI["check"]} –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'),
            types.KeyboardButton(f'{EMOJI["back"]} –ù–∞–∑–∞–¥')
        )
        return kb

    @staticmethod
    def cancel_button():
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(types.KeyboardButton(f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞"))
        return kb

    @staticmethod
    def back_button():
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(types.KeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥"))
        return kb

    @staticmethod
    def answer_type_buttons(qid: int):
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.add(
            types.InlineKeyboardButton(
                f"{EMOJI['online']} –û—Ç–≤–µ—Ç–∏—Ç—å –≤ Telegram", 
                callback_data=f"answer_online_{qid}"
            ),
            types.InlineKeyboardButton(
                f"{EMOJI['offline']} –õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞(–≤ —à–∫–æ–ª–µ)", 
                callback_data=f"answer_offline_{qid}"
            )
        )
        return kb

    @staticmethod
    def question_list(questions: List[Tuple]):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        kb = types.InlineKeyboardMarkup(row_width=1)
        for q in questions:
            text = q[1]
            if len(text) > 40:
                text = text[:37] + '...'
            kb.add(types.InlineKeyboardButton(
                f"{EMOJI['pin']} {text}", 
                callback_data=f"question_{q[0]}"
            ))
        return kb

    @staticmethod
    def help_button():
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            f"{EMOJI['sos']} –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É", 
            url="https://t.me/AcadeMix_Support_bot"
        ))
        return kb

    @staticmethod
    def format_welcome_message() -> str:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return f"""
{TEXT['welcome']}

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
‚Ä¢ {EMOJI['question']} –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—á–µ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ {EMOJI['open']} –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤
‚Ä¢ {EMOJI['rating']} –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∫–ª–∞—Å—Å–æ–≤

<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</b>
"""

    @staticmethod
    def format_admin_welcome() -> str:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return f"""
{TEXT['admin_welcome']}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ {EMOJI['add']} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∫–ª–∞—Å—Å–∞–º
‚Ä¢ {EMOJI['contact']} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
‚Ä¢ {EMOJI['rating']} –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∞—Å—Å–æ–≤
‚Ä¢ {EMOJI['check']} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</b>
"""

    @staticmethod
    def format_help_message() -> str:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return f"""
{TEXT['help_title']}

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
{EMOJI['question']} <b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</b> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
{EMOJI['open']} <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
{EMOJI['rating']} <b>–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤</b> - —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
"""

    @staticmethod
    def format_class_rating(scores: List[Tuple]) -> str:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∞—Å—Å–æ–≤ —Å –º–µ–¥–∞–ª—è–º–∏
        if not scores:
            return TEXT['empty_rating']
            
        text = f"{TEXT['rating_title']}\n\n"
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for idx, (cls, score) in enumerate(scores, 1):
            if idx <= 3 and idx <= len(medals):
                prefix = f"{medals[idx-1]} "
            else:
                prefix = f"{idx}. "
            text += f"{prefix}<b>{cls}</b>: {score} {EMOJI['points']}\n"
            
        return text

    @staticmethod
    def format_question(question: Dict[str, Any], with_author: bool = False) -> str:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ø—Ä–æ—Å–µ
        text = f"<b>{question['title']}</b>\n\n"
        
        if question['description'] and question['description'] != '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è':
            text += f"{question['description']}\n\n"
        
        text += f"{EMOJI['status']} <b>–°—Ç–∞—Ç—É—Å:</b> "
        text += f"{EMOJI['open_status']} –û—Ç–∫—Ä—ã—Ç" if question['status'] == 'open' else f"{EMOJI['closed_status']} –ó–∞–∫—Ä—ã—Ç"
        text += f"\n{EMOJI['time']} <b>–°–æ–∑–¥–∞–Ω:</b> {question['created_at']}"
        
        if with_author:
            text += f"\n{EMOJI['author']} <b>–ê–≤—Ç–æ—Ä:</b> {question['author']}"
            
        return text

    @staticmethod
    def format_authorized_contacts(contacts: List[str]) -> str:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if not contacts:
            return f"{EMOJI['empty']} <b>–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç</b>"
            
        text = f"{EMOJI['authorized']} <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        for idx, contact in enumerate(contacts, 1):
            text += f"{idx}. {contact}\n"
            
        return text