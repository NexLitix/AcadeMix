from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Tuple, Dict
from config import EMOJI

class UI:
    @staticmethod
    def main_menu():
        return ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text=f'{EMOJI["question"]} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'),
                    KeyboardButton(text=f'{EMOJI["open"]} –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
                ],
                [
                    KeyboardButton(text=f'{EMOJI["rating"]} –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤'),
                    KeyboardButton(text=f'{EMOJI["help"]} –ü–æ–º–æ—â—å')
                ]
            ],
            resize_keyboard=True
        )
    @staticmethod
    def admin_menu():
        return ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text=f'{EMOJI["add"]} –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã'),
                    KeyboardButton(text=f'{EMOJI["rating"]} –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤')
                ],
                [
                    KeyboardButton(text=f'{EMOJI["check"]} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î')
                ]
            ],
            resize_keyboard=True
        )
    @staticmethod
    def cancel_button():
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    @staticmethod
    def answer_type_buttons(qid: int):
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{EMOJI['online']} –û—Ç–≤–µ—Ç–∏—Ç—å –≤ Telegram", callback_data=f"answer_online_{qid}")],
                [InlineKeyboardButton(text=f"{EMOJI['offline']} –í—Å—Ç—Ä–µ—á–∞", callback_data=f"answer_offline_{qid}")]
            ]
        )
    @staticmethod
    def question_list(questions: List[Tuple]):
        inline_keyboard = []
        for q in questions:
            text = q[1]
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            if len(text) > 50:
                text = text[:47] + '...'
            inline_keyboard.append(
                [InlineKeyboardButton(text=f"{EMOJI['pin']} {text}", callback_data=f"question_{q[0]}")]
            )
        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    @staticmethod
    def help_button():
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É", url="https://t.me/AcadeMix_Support_bot")]
            ]
        )
    @staticmethod
    def format_class_rating(scores: List[Tuple]) -> str:
        text = f"{EMOJI['trophy']} <b>–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â"]
        for idx, (cls, score) in enumerate(scores, 1):
            # –ü–µ—Ä–≤—ã–º —Ç—Ä—ë–º –∫–ª–∞—Å—Å–∞–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç—Å—è –º–µ–¥–∞–ª–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–º ‚Äî –Ω–æ–º–µ—Ä
            if idx <= 3 and idx <= len(medals):
                prefix = f"{medals[idx-1]} "
            else:
                prefix = f"{idx}. "
            text += f"{prefix}<b>{cls}</b>: {score} –±–∞–ª–ª–æ–≤\n"
        return text
    @staticmethod
    def format_question(question: Dict, with_author: bool = False) -> str:
        text = f"<b>{question['title']}</b>\n\n"
        if question['description']:
            text += f"{question['description']}\n\n"
        text += f"{EMOJI['status']} –°—Ç–∞—Ç—É—Å: "
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–º–æ–¥–∑–∏
        text += f"{EMOJI['open_status']} –û—Ç–∫—Ä—ã—Ç" if question['status'] == 'open' else f"{EMOJI['closed_status']} –ó–∞–∫—Ä—ã—Ç"
        text += f"\n{EMOJI['time']} –°–æ–∑–¥–∞–Ω: {question['created_at']}"
        if with_author:
            text += f"\n{EMOJI['author']} –ê–≤—Ç–æ—Ä: {question['author']}"
        return text
